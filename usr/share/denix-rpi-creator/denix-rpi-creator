#!/bin/bash
#
# Copyright Â© 2001 - 2012 Denis Salmanovich denis.salmanovich@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#

# Set system vars
#################
IMGSIZE=1200
version="18"
dest_arch="armv6l"
rpi_hostname="denix.rpi"
work_dir="/srv/denix-rpi"
sd_rootfsdir="${work_dir}/sd_rootfsdir"
image="${work_dir}/denix-${version}-${dest_arch}.img"
fsdir=${image}p2

[ -f /etc/denix-colors ] && . /etc/denix-colors

# Check if script runs under root
#################################
if ! [ "$(whoami)" = "root" ]; then
    $color_Red
    echo "You have to run me with root user priveleges!"
    $color_Off
    exit 1
fi

# Check if script runs on arm architecture
##########################################
if ! [ "$(uname -m)" = "${dest_arch}" ]; then
    $color_Red
    echo "Please execute this script only on ${dest_arch} platform!"
    echo "Exiting..."
    $color_Off
    exit 1
fi

add_repos() {
    $color_BYellow
    echo
    echo "######################################################################"
    echo "#                                                                    #"
    echo "# Addind repos to system                                             #"
    echo "#                                                                    #"
    echo "######################################################################"
    echo
    $color_Off
    
    # Add repos to system
    ##########################################################################
    cat > /etc/yum.repos.d/inst-rpi.repo << EOF
[inst-rpi-remix]
name=rpi-remix
failovermethod=priority
baseurl=http://scotland.proximity.on.ca/~agreene/raspberrypi/raspberrypi-fedora-remix/${version}/packages/arm/os/
enabled=0
gpgcheck=0

[inst-rpi-fedora]
name=Fedora
failovermethod=priority
baseurl=
    http://archive.eu.kernel.org/fedora-secondary/releases/${version}/Everything/arm/os
    http://mirror.proserve.nl/fedora-secondary/releases/${version}/Everything/arm/os
    http://ftp.cc.uoc.gr/mirrors/linux/fedora-secondary/releases/${version}/Everything/arm/os
    http://archive.nl.eu.kernel.org/fedora-secondary/releases/${version}/Everything/arm/os
    http://fedora-mirror02.rbc.ru/pub/fedora-secondary/releases/${version}/Everything/arm/os
    http://fr2.rpmfind.net/linux/fedora-secondary/releases/${version}/Everything/arm/os
    http://ftp.df.lth.se/pub/fedora-secondary/releases/${version}/Everything/arm/os
enabled=0
gpgcheck=0

[inst-rpi-fedora-updates]
name=rpi-updates
failovermethod=priority
baseurl=
    http://fedora-mirror02.rbc.ru/pub/fedora-secondary/updates/${version}/arm
    http://mirror.kiewel-online.ch/secondary/updates/${version}/arm
    http://archive.nl.eu.kernel.org/fedora-secondary/updates/${version}/arm
    http://ftp.heanet.ie/mirrors/fedora-secondary/updates/${version}/arm
    http://mirror.proserve.nl/fedora-secondary/updates/${version}/arm
    http://fr2.rpmfind.net/linux/fedora-secondary/updates/${version}/arm
    http://ftp.df.lth.se/pub/fedora-secondary/updates/${version}/arm
    http://archive.eu.kernel.org/fedora-secondary/updates/${version}/arm
enabled=0
gpgcheck=0

[inst-denix]
name=Denix repo
failovermethod=priority
baseurl=
    http://mirror.os.vc/denix-repo/yum/base/${version}/arm
    http://fedora.os.vc/yum/base/${version}/arm
    http://web.macam.ac.il/~denix/fedora/yum/base/${version}/arm
enabled=0
gpgcheck=0
EOF
}

install_sd_rootfsdir() {
    $color_BYellow
    echo
    echo "######################################################################"
    echo "#                                                                    #"
    echo "# Preparing and installing rootfs dir                                #"
    echo "#                                                                    #"
    echo "######################################################################"
    echo
    $color_Off
    
    # Cleanup old rootfsdir
    #######################
    rm -rf ${sd_rootfsdir}
    
    # Prepare new rootfsdir
    #######################
    install -d ${sd_rootfsdir}/{var,run}
    ln -s ../run ${sd_rootfsdir}/var/run

    # Install packages into new rootfsdir
    ##########################################################################
    $color_Purple
    yum clean all
    yum install -y \
	--disablerepo=\* \
	--enablerepo=inst-rpi-remix \
	--enablerepo=inst-rpi-fedora \
	--enablerepo=inst-rpi-fedora-updates \
	--enablerepo=inst-denix \
	--installroot="$sd_rootfsdir" \
        -x fedora-release \
        -x fedora-release-notes \
        -x fedora-logos \
        -x generic-release \
        -x system-config-date \
        -x kernel \
        -x firstboot \
        -x raspberrypi-firstboot-mod \
        -x xorg-x11* \
        -x smolt \
        -x smolt-firstboot \
        -x kernel-kirkwood \
        -x ConsoleKit \
        -x kernel-imx \
        -x plymouth \
        -x abrt* \
        -x nfs-utils \
        -x talk \
        -x yp-tools \
        -x ypbind \
        -x coolkey \
        -x sendmail \
        postfix \
        whois \
        GeoIP \
        firewalld \
        nc \
        NetworkManager \
        system-config-network \
        raspberrypi-release \
        raspberrypi-vc-firmware \
        raspberrypi-release-notes \
        raspberrypi-kernel \
        raspberrypi-config \
        raspberrypi-vc-static \
        denix-bash \
        denix-colors \
        denix-prompt \
        denix-umask \
        denix-sounds \
        denix-skel \
        kpartx \
        dosfstools \
        net-tools \
        @base \
        @core \
        @hardware-support \
        bash-completion \
        rpm \
        mc \
        ntp \
        nortc \
        libimobiledevice \
        iso-codes \
        alsa-utils \
        git \
        tcptrack \
        lsof \
        bind-utils \
        coreutils \
        iftop \
        tar \
        which \
        minicom \
        screen \
        lftp \
        tree \
        setserial \
        python-rpi-gpio \
        file
    $color_Off

    if ! [ -e ${sd_rootfsdir}/etc ]; then
	$color_Red
	echo "Error! Something wrong! Please check internet connection and try again!"
	echo "Exiting..."
	$color_Off
	exit 1
    fi
}

post_installation() {
    $color_BYellow
    echo
    echo "######################################################################"
    echo "#                                                                    #"
    echo "# Post installation proccess                                         #"
    echo "#                                                                    #"
    echo "######################################################################"
    echo
    $color_Off
    
    # Post installation
    ###################
    $color_White
    cat > ${sd_rootfsdir}/etc/resolv.conf << EOF
nameserver 8.8.8.8
EOF

    rm -rf ${sd_rootfsdir}/etc/yum.repos.d/*
    cat > ${sd_rootfsdir}/etc/yum.repos.d/raspberry.repo << EOF
[rpi-remix]
name=rpi-remix
failovermethod=priority
baseurl=http://scotland.proximity.on.ca/~agreene/raspberrypi/raspberrypi-fedora-remix/${version}/packages/arm/os/
enabled=1
gpgcheck=0

[rpi-fedora]
name=Fedora
failovermethod=priority
mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-${version}&arch=arm
enabled=1
gpgcheck=0

[rpi-fedora-updates]
name=rpi-updates
failovermethod=priority
mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=updates-released-f${version}&arch=arm
enabled=1
gpgcheck=0

[denix]
name=Denix repo
failovermethod=priority
baseurl=
    http://mirror.os.vc/denix-repo/yum/base/${version}/arm
    http://fedora.os.vc/yum/base/${version}/arm
    http://web.macam.ac.il/~denix/fedora/yum/base/${version}/arm
enabled=1
gpgcheck=0
EOF

    # /etc/fstab
    cat > ${sd_rootfsdir}/etc/fstab << EOF
LABEL="rootfs"          /                       ext4    defaults,noatime                 1 1
LABEL="boot"            /boot                   vfat    noauto,comment=systemd.automount 1 2
EOF

    # /etc/fedora-release
    ln -s redhat-release ${sd_rootfsdir}/etc/fedora-release
    echo "Denix release 18 (Spherical Cow)" > ${sd_rootfsdir}/etc/fedora-release

    # /etc/hosts
    cat > ${sd_rootfsdir}/etc/hosts << EOF
127.0.0.1       localhost localhost.localdomain ${rpi_hostname}
EOF

    chroot  ${sd_rootfsdir} pwconv
    chroot  ${sd_rootfsdir} grpconv

    chroot ${sd_rootfsdir} systemctl enable nortc.service
    chroot ${sd_rootfsdir} systemctl enable ntpdate.service
    chroot ${sd_rootfsdir} systemctl enable firewalld.service
    chroot ${sd_rootfsdir} systemctl start getty@ttyAMA0
    chroot ${sd_rootfsdir} systemctl enable getty@ttyAMA0
    chroot ${sd_rootfsdir} ln -s /usr/lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@ttyAMA0.service

    # password for root (password=raspberrypi)
    echo "Setting root password: raspberrypi"
    sed -i 's|root:.*:|root:$6$KW0GGbE5$zlEB9.PbHVh8kmXj1WMFGLJGwwthhU4oXn2oNxHZllbUSzTsVhTZ9jts8RC7uicuUCWyrsZ1e2yEj4ErDLOHQ/:15525:0:99999:7:::|' ${sd_rootfsdir}/etc/shadow

    # Disable SELINUX
    sed -i 's/^SELINUX=.*$/SELINUX=disabled/g'    ${sd_rootfsdir}/etc/selinux/config

    cat > ${sd_rootfsdir}/tmp/optimize-systemd << EOF
#!/bin/bash
echo "Optimizing systemd..."
for i in fedora-storage-init-late.service fedora-storage-init.service plymouth-halt.service plymouth-kexec.service plymouth-poweroff.service plymouth-quit.service plymouth-quit-wait.service plymouth-read-write.service plymouth-reboot.service plymouth-start.service mdmonitor.service mdmonitor-takeover.service auditd.service avahi-daemon.service avahi-daemon.socket bluetooth.target dev-hugepages.mount dev-mqueue.mount fedora-configure.service fedora-loadmodules.service fedora-readonly.service ip6tables.service sys-kernel-config.mount sys-kernel-debug.mount systemd-readahead-collect.service systemd-readahead-done.service systemd-readahead-done.timer systemd-readahead-replay.service

        do systemctl mask \$i
        done
EOF
    chmod 0755 ${sd_rootfsdir}/tmp/optimize-systemd
    chroot ${sd_rootfsdir} /tmp/optimize-systemd
    rm -f ${sd_rootfsdir}/tmp/optimize-systemd

    # Add script to resize partition at first boot
    cat > ${sd_rootfsdir}/etc/rc.d/init.d/resizefs << EOF_RESIZEFS
#!/bin/bash
#
# live: Init script for resizefs
#
# chkconfig: 345 00 99
# description: Init script for resizefs

if [ -f /.rootfs-repartition ]; then
    echo "Changing the root partition size"
    echo -e "d\n2\nn\np\n2\n\n\np\nw\n" | fdisk /dev/mmcblk0 >/dev/null 2>&1
    echo "Repartition done, rebooting for next phase of resize."
    touch /.rootfs-resize
    rm -f /.rootfs-repartition
    reboot
else
    if [ -f /.rootfs-resize ]; then
	echo "Resizing the root partition..."
	ionice -n 7 resize2fs -p /dev/mmcblk0p2
	rm -f /.rootfs-resize
	
	echo "Creating the swap file..."
	dd if=/dev/zero of=/swapfile bs=1M count=128
	mkswap /swapfile
	swapon /swapfile
	echo "/swapfile	none	swap	sw	0 0" >> /etc/fstab
    fi
fi
EOF_RESIZEFS
    chmod 755 ${sd_rootfsdir}/etc/rc.d/init.d/resizefs
    chroot ${sd_rootfsdir} /sbin/chkconfig --add resizefs

    # hostname
    cat > ${sd_rootfsdir}/etc/sysconfig/network << EOF
NETWORKING=yes
HOSTNAME=${rpi_hostname}
NETWORKWAIT=1
EOF

    # default network configuration (dhcp)
    cat > ${sd_rootfsdir}/etc/sysconfig/network-scripts/ifcfg-eth0 << EOF
DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
NM_CONTROLLED=yes
DNS1=8.8.8.8
EOF

    # Disable ipv6
    echo "Disabling ipv6..."
    cat >> ${sd_rootfsdir}/etc/sysctl.conf << EOF
net.ipv6.conf.all.disable_ipv6=1
net.ipv6.conf.default.disable_ipv6=1
EOF

    # Set hostname
    echo "${rpi_hostname}" > ${sd_rootfsdir}/etc/hostname

    # Add issue message
    cat > ${sd_rootfsdir}/etc/issue << EOF_ISSUE
Welcome to DeniX-RPI
~~~~~~~~~~~~~~~~~~~~

EOF_ISSUE

    # Edit SSH properties
    sed -i 's/#Protocol 2/Protocol 2/g' ${sd_rootfsdir}/etc/ssh/sshd_config
    echo "ServerAliveInterval 100" >> ${sd_rootfsdir}/etc/ssh/ssh_config
    sed -i 's/^#Banner.*$/Banner \/etc\/issue/g' ${sd_rootfsdir}/etc/ssh/sshd_config

    # Disable root mail notifications
    echo "root:		/dev/null" >> ${sd_rootfsdir}/etc/aliases
    chroot ${sd_rootfsdir} newaliases >/dev/null

    # History search
    cat >> ${sd_rootfsdir}/etc/inputrc << EOF_INPUTRC
"\e[A": history-search-backward
"\e[B": history-search-forward
EOF_INPUTRC

    # MC brief mode for root
    install -m 0700 -d ${sd_rootfsdir}/root/.cache/mc
    cat > ${sd_rootfsdir}/root/.cache/mc/panels.ini << EOF_MC_ROOT
[New Left Panel]
list_mode=brief
[New Right Panel]
list_mode=brief
EOF_MC_ROOT
    chmod 600 ${sd_rootfsdir}/root/.cache/mc/panels.ini

    # Add public key for root authorization
    install -m 0700 -d ${sd_rootfsdir}/root/.ssh
    cat > ${sd_rootfsdir}/root/.ssh/authorized_keys << EOF_SSH
EOF_SSH
    chmod 600 ${sd_rootfsdir}/root/.ssh/authorized_keys

    # Add rc.local compatibility
    echo "#! /bin/bash" > ${sd_rootfsdir}/etc/rc.d/rc.local
    chmod 755 ${sd_rootfsdir}/etc/rc.d/rc.local

    # Add console colors
    cat >> ${sd_rootfsdir}/etc/rc.d/rc.local << EOF
for i in /dev/tty[0-9]*; do
    echo -en "\\\033[1;32m\\\033[8]" > \$i
    echo -en "\033[9;0]" > \$i
done
EOF

    # Start unicode at login
    echo "unicode_start" > ${sd_rootfsdir}/etc/profile.d/unicode.sh

    # Edit login.defs
    echo "Setting login.defs..."
    sed -i 's/^UID_MIN.*$/UID_MIN			1000/g' ${sd_rootfsdir}/etc/login.defs
    sed -i 's/^GID_MIN.*$/GID_MIN			1000/g' ${sd_rootfsdir}/etc/login.defs

    # Set 32Mb for GPU
    echo "Optimizing memory..."
    echo "gpu_mem=32" > ${sd_rootfsdir}/boot/config.txt

    # Change serial speed
    sed -i 's/^.*ExecStart=.*$/ExecStart=-\/sbin\/agetty --noclear %I 115200 linux/g' ${sd_rootfsdir}/usr/lib/systemd/system/getty@.service

    $color_Off
}

prepare_image() {
    $color_BYellow
    echo
    echo "######################################################################"
    echo "#                                                                    #"
    echo "# Preparing image file                                               #"
    echo "#                                                                    #"
    echo "######################################################################"
    echo
    $color_Off

    # Delete old image file
    ######################
    install -d ${work_dir}
    rm -rf ${image}

    # Create image file, partition it
    #################################
    $color_BYellow
    echo "Creating image file..."
    $color_Off
    dd if=/dev/zero of=${image} bs=1M count=${IMGSIZE}
    $color_BYellow
    echo "Creating partitions..."
    $color_Off
    echo -e "n\np\n1\n\n+51M\nn\np\n2\n\n\nt\n1\nc\na\n1\np\nw\n" | fdisk ${image}
    sleep 2

    # Create image devmappings
    ##########################
    $color_BYellow
    echo "Creating device mappings..."
    $color_Off
    kpartx -av ${image}
    sleep 2

    # Get partitions and make them accessible via loopback+dm
    #########################################################
    losetup -a
    loopback=$( losetup -a | grep "${image}" | cut -d":" -f1 | xargs -I {} basename {} )

    # Create filesystems
    ####################
    $color_BYellow
    echo "Formatting boot partition..."
    $color_Off
    mkfs -t vfat -n boot   /dev/mapper/${loopback}p1
    sleep 1

    $color_BYellow
    echo "Formatting root partition..."
    $color_Off
    mkfs -t ext4 -L rootfs /dev/mapper/${loopback}p2

    # Mount filesystems
    ###################
    $color_BYellow
    echo "Mounting partitions..."
    $color_Off
    mkdir -p ${fsdir}
    mount -o rw /dev/mapper/${loopback}p2 ${fsdir}
    mkdir -p ${fsdir}/boot
    mount -o rw /dev/mapper/${loopback}p1 ${fsdir}/boot

    # Bind-mount system/kernel filesystems
    ######################################
    mkdir -p ${fsdir}/{proc,dev,sys}
    mknod ${fsdir}/dev/console c 5 1
    mknod ${fsdir}/dev/null c 1 3
    mknod ${fsdir}/dev/zero c 1 5

    # Create repart label
    #####################
    touch ${fsdir}/.rootfs-repartition

    $color_Off
    sleep 5
}

copy_all() {
    $color_BYellow
    echo
    echo "######################################################################"
    echo "#                                                                    #"
    echo "# Copying rootfsdir to image                                         #"
    echo "#                                                                    #"
    echo "######################################################################"
    echo
    $color_Off

    # Copy sd rootfs to image
    #########################
    $color_Cyan
    echo "Copying boot..."
    cp -rp ${sd_rootfsdir}/boot/* ${fsdir}/boot
    for i in bin etc home lib media mnt opt root run sbin srv tmp usr var; do
	echo "Copying $i..."
	cp -rp ${sd_rootfsdir}/$i ${fsdir}
    done
    touch ${fsdir}/.rootfs-repartition
    $color_Off
}


reinstall_rootfs() {
    $color_BYellow
    echo
    echo "######################################################################"
    echo "#                                                                    #"
    echo "# Reinstalling rootfs                                                #"
    echo "#                                                                    #"
    echo "######################################################################"
    echo
    $color_Off
    
    # Reinstall rootfs
    ##################
    cat << EOF >${sd_rootfsdir}/tmp/reinstall
#!/bin/bash
echo "Reinstalling within chroot."
yum reinstall -y \$(rpm -qa --qf "%{name}\n"|egrep -v "^setup$")
yum clean all
find / -name '*.rpmsave' -o -name '*.rpmnew' -delete
EOF
    chmod 0755 ${fsdir}/tmp/reinstall
    $color_Blue
    chroot ${fsdir} /tmp/reinstall
    $color_Off
    rm ${fsdir}/tmp/reinstall
}

close_image() {
    $color_BYellow
    echo
    echo "######################################################################"
    echo "#                                                                    #"
    echo "# Closing image                                                      #"
    echo "#                                                                    #"
    echo "######################################################################"
    echo
    $color_Off

    # Unmount filesystems
    #####################
    $color_BYellow
    echo "Unmounting partitions..."
    $color_Off
    umount ${image}p2/boot
    umount ${image}p2
    rmdir  ${image}p2

    # Delete image devmappings
    ##########################
    $color_BYellow
    echo "Deleting device mappings..."
    $color_Off
    kpartx -dv $image && LAST_ERR=0 || LAST_ERR=1

    # Print message
    ###############
    if [ "${LAST_ERR}"="0" ]; then
	$color_Yellow
	echo
	echo "Your image is ready and can be found in: ${image}"
	echo "Write it to SD card with this command:"
	echo "dd if=denix-${version}-${dest_arch}.img of=/dev/xxx bs=1M"
	echo
	echo "The first boot takes a long time because of resizing, repartitioning and making swap file."
	echo "Have a nice usage!"
	echo
    else
	$color_Red
	echo
	echo "Errors found!"
	echo "Exiting..."
	$color_Off
	exit 1
    fi
}

show_help() {
    $color_Yellow
    echo "Usage: $0 <options>"
    echo
    echo "Options:"
    echo "	--add_repos  - Add helper repositories (as disabled) to current system for installation proccess"
    echo "	--install_sd_rootfsdir  - Install sd root file system"
    echo "	--post_installation  - Post installation proccess, patching the root file system"
    echo "	--prepare_image  - Create and prepare sd image file"
    echo "	--copy_all  - Copy installed sd root file system to the sd image file"
    echo "	--close_image  - Close image file and make it ready to use"
    echo "	--help  - Show this help message"
    echo "	--reinstall_rootfs  - Reinstall all packages in the sd root file system"
    echo "	--all  - Build completly the system"
    $color_Off
}

# Get the user arguments
case $1 in
	-h|--help)
	    show_help
	    exit 0
	    ;;
	--add_repos)
	    add_repos
	    exit 0
	    ;;
	--install_sd_rootfsdir)
	    install_sd_rootfsdir
	    exit 0
	    ;;
	--prepare_image)
	    prepare_image
	    exit 0
	    ;;
	--reinstall_rootfs)
	    reinstall_rootfs
	    exit 0
	    ;;
	--copy_all)
	    copy_all
	    exit 0
	    ;;
	--post_installation)
	    post_installation
	    exit 0
	    ;;
	--close_image)
	    close_image
	    exit 0
	    ;;
	--all)
	    add_repos
	    install_sd_rootfsdir
	    post_installation
	    prepare_image
	    copy_all
	    close_image
	    exit 0
	    ;;
	*)
	    show_help
	    exit 0
	    ;;
esac
