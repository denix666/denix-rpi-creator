#!/bin/bash

set -x

exec 2>&1		# Unify outpup

IMGSIZE=3000		# Image size in MB

echo "##### $(date) - Starting"
echo "##### $(date) - Creating SD card image"

# Image filename
image=/var/tmp/rpfr-$$.img

# Create image file, partition it
dd if=/dev/zero of=${image} bs=1M count=${IMGSIZE}
echo -e "n\np\n1\n\n+51M\nn\np\n2\n\n\nt\n1\nc\na\n1\np\nw\n" | fdisk ${image}

kpartx -av ${image}

# Get partitions and make them accessible via loopback+dm
losetup -a
loopback=$( losetup -a | grep "$image" | cut -d":" -f1 | xargs -I {} basename {} )

# Create filesystems
mkfs -t vfat -n boot   /dev/mapper/${loopback}p1
mkfs -t ext4 -L rootfs /dev/mapper/${loopback}p2

# Mount filesystems
fsdir=${image}p2
mkdir -p ${fsdir}
mount -o rw /dev/mapper/${loopback}p2 ${fsdir}
mkdir -p ${fsdir}/boot
mount -o rw /dev/mapper/${loopback}p1 ${fsdir}/boot

# Bind-mount system/kernel filesystems
mkdir -p ${fsdir}/{proc,dev,sys}
mount -o bind /proc ${fsdir}/proc/
mount -o bind /dev  ${fsdir}/dev/
mount -o bind /sys  ${fsdir}/sys

# Create basic device nodes and directories
mknod ${fsdir}/dev/console c 5 1
mknod ${fsdir}/dev/null c 1 3
mknod ${fsdir}/dev/zero c 1 5
mkdir -p ${fsdir}/var/lib/yum
mkdir -p ${fsdir}/var/log
mkdir -p ${fsdir}/etc
touch ${fsdir}/etc/fstab

echo "##### $(date) - Installing packages"

# Install packages into image
yum clean all
yum \
	install -y					\
	--disablerepo=\* 				\
	--enablerepo=fedorasfp 				\
	--enablerepo=rpfr	 			\
	--enablerepo=fedorasfp-updates 			\
	--installroot="$fsdir" 				\
	-x fedora-release 				\
	-x fedora-release-notes 			\
	-x fedora-logos 				\
	-x generic-release				\
	-x system-config-date 				\
	-x kernel 					\
	-x firstboot 					\
	-x xorg-x11-drv-ati 				\
	-x xorg-x11-drv-cirrus 				\
	-x xorg-x11-drv-geode 				\
	-x xorg-x11-drv-intel				\
	-x xorg-x11-drv-mga 				\
	-x xorg-x11-drv-nouveau 			\
	-x xorg-x11-drv-omap 				\
	-x xorg-x11-drv-qxl 				\
	-x xorg-x11-drv-vesa 				\
	-x xorg-x11-drv-vmware 				\
	-x smolt					\
	-x smolt-firstboot				\
	-x kernel-kirkwood				\
	-x ConsoleKit					\
	-x kernel-imx					\
	-x plymouth					\
	-x abrt*					\
        -x nfs-utils                                    \
        -x talk                                         \
	-x yp-tools					\
	-x ypbind					\
	-x coolkey					\
	@core 						\
	@base 						\
	@hardware-support 				\
	@xfce						\
	xorg-x11-server-Xorg				\
	xorg-x11-xauth					\
	xorg-x11-xinit					\
	xorg-x11-drv-evdev				\
	desktop-backgrounds-basic			\
	mesa-dri-drivers				\
	xorg-x11-drv-fbdev				\
	xorg-x11-utils					\
	dejavu-sans-fonts				\
	dejavu-serif-fonts				\
	dejavu-sans-mono-fonts				\
	dejavu-fonts-common				\
	liberation-sans-fonts				\
	liberation-serif-fonts				\
	liberation-mono-fonts				\
	liberation-narrow-fonts				\
	liberation-fonts-common				\
	setup						\
	yum 						\
	rpm 						\
	bash 						\
	chrony 						\
	strace 						\
	shadow-utils 					\
	mlocate 					\
	ntpdate 					\
	less 						\
	sl						\
	units 						\
	fpaste 						\
	wget						\
	curl						\
	systemd 					\
	systemd-units 					\
	ruby 						\
	midori						\
        raspberrypi-fedora-remix-logos                  \
        raspberrypi-release             		\
        raspberrypi-vc-firmware				\
        raspberrypi-release-notes                       \
        raspberrypi-rootfs-resize                       \
        raspberrypi-kernel                              \
        raspberrypi-vc-demo-source                      \
        raspberrypi-vc-libs                             \
        raspberrypi-vc-libs-devel                       \
        raspberrypi-system-config-date                  \
        raspberrypi-config                              \
        raspberrypi-firstboot                           \
        raspberrypi-vc-static 				\
	libbcm2835					\
	perl-Device-BCM2835				\
	pi3d						\
	nortc						\
	wiringpi					\
	pulseaudio					\
	espeak

echo "##### $(date) - Post-installation file configuration"

# Re-install to fixup users

cp /etc/resolv.conf ${fsdir}/etc/resolv.conf
cat << EOF >${fsdir}/tmp/reinstall
#!/bin/bash
echo "Reinstalling within chroot."
yum reinstall -y \$(rpm -qa --qf "%{name}\n"|egrep -v "^setup$")
yum clean all
find / -name '*.rpmsave' -o -name '*.rpmnew' -delete
echo "Finished reinstalling within chroot. Exit status: $?"
EOF
chmod 0755 ${fsdir}/tmp/reinstall

chroot ${fsdir} /tmp/reinstall
rm ${fsdir}/tmp/reinstall ${fsdir}/etc/resolv.conf

# Post-installation

# /etc/fstab
cat << EOF >> $fsdir/etc/fstab
LABEL="rootfs"          /                       ext4    defaults,noatime                 1 1
LABEL="boot"            /boot                   vfat    noauto,comment=systemd.automount 1 2
EOF

# /etc/hosts
cat << EOF > $fsdir/etc/hosts
127.0.0.1       localhost localhost.localdomain raspi.local
EOF

# root password
sed -i 's|^root:.*|root:x:0:0:root:/root:/bin/bash|' ${fsdir}/etc/passwd
sed -i 's|^SELINUX=enforcing|SELINUX=permissive|'    ${fsdir}/etc/selinux/config

# hostname
cat << EOF > ${fsdir}/etc/sysconfig/network
NETWORKING=yes
HOSTNAME=raspi.local
NETWORKWAIT=1
EOF



# Agreene's suggestions for optimazation on Boot

cat << EOF > ${fsdir}/tmp/optimize-systemd
#!/bin/bash
echo "Optimizing systemd within chroot."
for i in fedora-storage-init-late.service fedora-storage-init.service plymouth-halt.service plymouth-kexec.service plymouth-poweroff.service plymouth-quit.service plymouth-quit-wait.service plymouth-read-write.service plymouth-reboot.service plymouth-start.service mdmonitor.service mdmonitor-takeover.service auditd.service avahi-daemon.service avahi-daemon.socket bluetooth.target dev-hugepages.mount dev-mqueue.mount fedora-configure.service fedora-loadmodules.service fedora-readonly.service ip6tables.service sys-kernel-config.mount sys-kernel-debug.mount systemd-readahead-collect.service systemd-readahead-done.service systemd-readahead-done.timer systemd-readahead-replay.service

        do systemctl mask \$i
        done

# Missing symlink for sendmail.pid 
ln -s /var/run /run

# start sm-client
systemctl enable sm-client.service


echo "Finished optimizing within chroot. Exit status: $?"
EOF
chmod 0755 ${fsdir}/tmp/optimize-systemd
chroot ${fsdir} /tmp/optimize-systemd



# selinux disabled (memory requirements)
sed -i "s|SELINUX=.*|SELINUX=disabled|" ${fsdir}/etc/selinux/config

# shadow file

#echo "############### INVOKING BASH SHELL FOR DEBUG OF USER ACCOUNTS"
#cd ${fsdir}/etc
#export PS1="debug> "
#bash

for X in passwd shadow group gshadow
do
	echo "==================================== $X"
	ls -l ${fsdir}/etc/$X
	echo "------------------------------------"
	cat ${fsdir}/etc/$X
done
echo         "===================================="

chroot  ${fsdir} pwconv
chroot  ${fsdir} grpconv

chroot ${fsdir} systemctl enable nortc.service

# password for root (password=raspberrypi, overwritten by firstboot)
sed -i 's|root:.*:|root:$6$KW0GGbE5$zlEB9.PbHVh8kmXj1WMFGLJGwwthhU4oXn2oNxHZllbUSzTsVhTZ9jts8RC7uicuUCWyrsZ1e2yEj4ErDLOHQ/:15525:0:99999:7:::|' $fsdir/etc/shadow

# default network configuration (dhcp)
cat << EOF > $fsdir/etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
NM_CONTROLLED=yes
EOF

# i18n settings
cat <<EOF > ${fsdir}/etc/sysconfig/i18n
LANG="en_US.UTF-8"
SYSFONT="latarcyrheb-sun16"
EOF

echo "##### $(date) - Unmount filesystems"

echo
echo "---- size info ---"
df -h
echo "------------------"
echo
 
# Unmount filesystems
umount ${fsdir}/proc/
umount ${fsdir}/dev/
umount ${fsdir}/sys/
umount ${image}p2/boot
umount ${image}p2
rmdir  ${image}p2

#resize2fs -m /dev/mapper/${loopback}p2

kpartx -dv $image

echo "##### $(date) - Finished"
